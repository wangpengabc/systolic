;chisel3.BuildInfo$@527a8665
circuit RecordQueueTester : 
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {bar : UInt<32>, foo : UInt<32>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {bar : UInt<32>, foo : UInt<32>}}, count : UInt<3>}
    
    cmem ram : {bar : UInt<32>, foo : UInt<32>}[4] @[Decoupled.scala 220:95]
    reg enq_ptr_value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg deq_ptr_value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 223:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 225:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 226:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 226:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 227:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 231:17]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 232:8]
      MPORT.foo <= io.enq.bits.foo @[Decoupled.scala 232:24]
      MPORT.bar <= io.enq.bits.bar @[Decoupled.scala 232:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 231:17]
    when do_deq : @[Decoupled.scala 235:17]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 235:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 238:16]
    when _T : @[Decoupled.scala 238:28]
      maybe_full <= do_enq @[Decoupled.scala 239:16]
      skip @[Decoupled.scala 238:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 242:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 242:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 243:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 243:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 251:23]
    io.deq.bits.foo <= io_deq_bits_MPORT.foo @[Decoupled.scala 251:17]
    io.deq.bits.bar <= io_deq_bits_MPORT.bar @[Decoupled.scala 251:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 267:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 267:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 269:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 269:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 269:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 269:14]
    
  module RecordQueueTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst queue of Queue @[RecordSpec.scala 64:23]
    queue.clock <= clock
    queue.reset <= reset
    queue.io.count is invalid @[RecordSpec.scala 65:14]
    queue.io.deq.bits.foo is invalid @[RecordSpec.scala 65:14]
    queue.io.deq.bits.bar is invalid @[RecordSpec.scala 65:14]
    queue.io.deq.valid is invalid @[RecordSpec.scala 65:14]
    queue.io.deq.ready is invalid @[RecordSpec.scala 65:14]
    queue.io.enq.bits.foo is invalid @[RecordSpec.scala 65:14]
    queue.io.enq.bits.bar is invalid @[RecordSpec.scala 65:14]
    queue.io.enq.valid is invalid @[RecordSpec.scala 65:14]
    queue.io.enq.ready is invalid @[RecordSpec.scala 65:14]
    queue.io.enq.valid <= UInt<1>("h00") @[RecordSpec.scala 66:24]
    reg cycle : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    wire done : UInt<1>
    done <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node wrap_wrap = eq(cycle, UInt<2>("h03")) @[Counter.scala 72:24]
      node _wrap_value_T = add(cycle, UInt<1>("h01")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      cycle <= _wrap_value_T_1 @[Counter.scala 76:15]
      done <= wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    node _T = eq(cycle, UInt<1>("h00")) @[RecordSpec.scala 69:17]
    when _T : @[RecordSpec.scala 69:26]
      queue.io.enq.bits.foo <= UInt<11>("h04d2") @[RecordSpec.scala 70:32]
      queue.io.enq.bits.bar <= UInt<13>("h0162e") @[RecordSpec.scala 71:32]
      queue.io.enq.valid <= UInt<1>("h01") @[RecordSpec.scala 72:26]
      skip @[RecordSpec.scala 69:26]
    node _T_1 = eq(cycle, UInt<1>("h01")) @[RecordSpec.scala 74:17]
    when _T_1 : @[RecordSpec.scala 74:26]
      queue.io.deq.ready <= UInt<1>("h01") @[RecordSpec.scala 75:26]
      node _T_2 = eq(queue.io.deq.valid, UInt<1>("h01")) @[RecordSpec.scala 76:33]
      node _T_3 = bits(reset, 0, 0) @[RecordSpec.scala 76:13]
      node _T_4 = or(_T_2, _T_3) @[RecordSpec.scala 76:13]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[RecordSpec.scala 76:13]
      when _T_5 : @[RecordSpec.scala 76:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:76 assert(queue.io.deq.valid === true.B)\n") @[RecordSpec.scala 76:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 76:13]
        skip @[RecordSpec.scala 76:13]
      node _T_6 = eq(queue.io.deq.bits.foo, UInt<11>("h04d2")) @[RecordSpec.scala 77:46]
      node _T_7 = bits(reset, 0, 0) @[RecordSpec.scala 77:13]
      node _T_8 = or(_T_6, _T_7) @[RecordSpec.scala 77:13]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[RecordSpec.scala 77:13]
      when _T_9 : @[RecordSpec.scala 77:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:77 assert(queue.io.deq.bits(\"foo\").asUInt === 1234.U)\n") @[RecordSpec.scala 77:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 77:13]
        skip @[RecordSpec.scala 77:13]
      node _T_10 = eq(queue.io.deq.bits.bar, UInt<13>("h0162e")) @[RecordSpec.scala 78:46]
      node _T_11 = bits(reset, 0, 0) @[RecordSpec.scala 78:13]
      node _T_12 = or(_T_10, _T_11) @[RecordSpec.scala 78:13]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[RecordSpec.scala 78:13]
      when _T_13 : @[RecordSpec.scala 78:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:78 assert(queue.io.deq.bits(\"bar\").asUInt === 5678.U)\n") @[RecordSpec.scala 78:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 78:13]
        skip @[RecordSpec.scala 78:13]
      skip @[RecordSpec.scala 74:26]
    when done : @[RecordSpec.scala 80:17]
      node _T_14 = bits(reset, 0, 0) @[RecordSpec.scala 81:11]
      node _T_15 = eq(_T_14, UInt<1>("h00")) @[RecordSpec.scala 81:11]
      when _T_15 : @[RecordSpec.scala 81:11]
        stop(clock, UInt<1>(1), 0) @[RecordSpec.scala 81:11]
        skip @[RecordSpec.scala 81:11]
      skip @[RecordSpec.scala 80:17]
    
