;chisel3.BuildInfo$@527a8665
circuit AsyncResetSpec_Anon : 
  module AsyncResetSpec_Anon : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _reg_T = asAsyncReset(reset) @[AsyncResetSpec.scala 262:33]
    wire _reg_WIRE : UInt<8>[4] @[AsyncResetSpec.scala 263:39]
    _reg_WIRE[0] <= UInt<8>("h0d0") @[AsyncResetSpec.scala 263:39]
    _reg_WIRE[1] <= UInt<8>("h0ca") @[AsyncResetSpec.scala 263:39]
    _reg_WIRE[2] <= UInt<8>("h0d0") @[AsyncResetSpec.scala 263:39]
    _reg_WIRE[3] <= UInt<8>("h0ba") @[AsyncResetSpec.scala 263:39]
    wire _reg_WIRE_1 : UInt<8>[4] @[AsyncResetSpec.scala 263:82]
    _reg_WIRE_1[0] <= UInt<8>("h0ef") @[AsyncResetSpec.scala 263:82]
    _reg_WIRE_1[1] <= UInt<8>("h0be") @[AsyncResetSpec.scala 263:82]
    _reg_WIRE_1[2] <= UInt<8>("h0ad") @[AsyncResetSpec.scala 263:82]
    _reg_WIRE_1[3] <= UInt<8>("h0de") @[AsyncResetSpec.scala 263:82]
    reg reg : UInt<8>[4], clock with : (reset => (_reg_T, _reg_WIRE_1)) @[AsyncResetSpec.scala 263:16]
    reg[0] <= _reg_WIRE[0] @[AsyncResetSpec.scala 263:16]
    reg[1] <= _reg_WIRE[1] @[AsyncResetSpec.scala 263:16]
    reg[2] <= _reg_WIRE[2] @[AsyncResetSpec.scala 263:16]
    reg[3] <= _reg_WIRE[3] @[AsyncResetSpec.scala 263:16]
    reg count : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    wire done : UInt<1>
    done <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node wrap_wrap = eq(count, UInt<2>("h03")) @[Counter.scala 72:24]
      node _wrap_value_T = add(count, UInt<1>("h01")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      count <= _wrap_value_T_1 @[Counter.scala 76:15]
      done <= wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    node _T = eq(count, UInt<1>("h00")) @[AsyncResetSpec.scala 266:19]
    when _T : @[AsyncResetSpec.scala 266:28]
      node lo = cat(reg[1], reg[0]) @[AsyncResetSpec.scala 267:28]
      node hi = cat(reg[3], reg[2]) @[AsyncResetSpec.scala 267:28]
      node _T_1 = cat(hi, lo) @[AsyncResetSpec.scala 267:28]
      node _T_2 = eq(_T_1, UInt<32>("h0deadbeef")) @[AsyncResetSpec.scala 267:35]
      node _T_3 = bits(reset, 0, 0) @[AsyncResetSpec.scala 267:23]
      node _T_4 = or(_T_2, _T_3) @[AsyncResetSpec.scala 267:23]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[AsyncResetSpec.scala 267:23]
      when _T_5 : @[AsyncResetSpec.scala 267:23]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:267 chisel3.assert(reg.asUInt === 0xdeadbeefL.U)\n") @[AsyncResetSpec.scala 267:23]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 267:23]
        skip @[AsyncResetSpec.scala 267:23]
      skip @[AsyncResetSpec.scala 266:28]
    else : @[AsyncResetSpec.scala 268:20]
      node lo_1 = cat(reg[1], reg[0]) @[AsyncResetSpec.scala 269:28]
      node hi_1 = cat(reg[3], reg[2]) @[AsyncResetSpec.scala 269:28]
      node _T_6 = cat(hi_1, lo_1) @[AsyncResetSpec.scala 269:28]
      node _T_7 = eq(_T_6, UInt<32>("h0bad0cad0")) @[AsyncResetSpec.scala 269:35]
      node _T_8 = bits(reset, 0, 0) @[AsyncResetSpec.scala 269:23]
      node _T_9 = or(_T_7, _T_8) @[AsyncResetSpec.scala 269:23]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[AsyncResetSpec.scala 269:23]
      when _T_10 : @[AsyncResetSpec.scala 269:23]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:269 chisel3.assert(reg.asUInt === 0xbad0cad0L.U)\n") @[AsyncResetSpec.scala 269:23]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 269:23]
        skip @[AsyncResetSpec.scala 269:23]
      skip @[AsyncResetSpec.scala 268:20]
    when done : @[AsyncResetSpec.scala 271:19]
      node _T_11 = bits(reset, 0, 0) @[AsyncResetSpec.scala 271:25]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[AsyncResetSpec.scala 271:25]
      when _T_12 : @[AsyncResetSpec.scala 271:25]
        stop(clock, UInt<1>(1), 0) @[AsyncResetSpec.scala 271:25]
        skip @[AsyncResetSpec.scala 271:25]
      skip @[AsyncResetSpec.scala 271:19]
    
