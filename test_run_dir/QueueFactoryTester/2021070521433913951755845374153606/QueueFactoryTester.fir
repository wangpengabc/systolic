;chisel3.BuildInfo$@527a8665
circuit QueueFactoryTester : 
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, count : UInt<2>}
    
    smem ram : UInt<4>[2], new @[Decoupled.scala 220:44]
    reg value : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 223:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 225:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 226:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 226:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 227:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 231:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 232:8]
      MPORT <= io.enq.bits @[Decoupled.scala 232:24]
      node wrap = eq(value, UInt<1>("h01")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 231:17]
    when do_deq : @[Decoupled.scala 235:17]
      node wrap_1 = eq(value_1, UInt<1>("h01")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 235:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 238:16]
    when _T : @[Decoupled.scala 238:28]
      maybe_full <= do_enq @[Decoupled.scala 239:16]
      skip @[Decoupled.scala 238:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 242:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 242:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 243:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 243:16]
    node _deq_ptr_next_T = sub(UInt<2>("h02"), UInt<1>("h01")) @[Decoupled.scala 246:57]
    node _deq_ptr_next_T_1 = tail(_deq_ptr_next_T, 1) @[Decoupled.scala 246:57]
    node _deq_ptr_next_T_2 = eq(value_1, _deq_ptr_next_T_1) @[Decoupled.scala 246:42]
    node _deq_ptr_next_T_3 = add(value_1, UInt<1>("h01")) @[Decoupled.scala 246:84]
    node _deq_ptr_next_T_4 = tail(_deq_ptr_next_T_3, 1) @[Decoupled.scala 246:84]
    node deq_ptr_next = mux(_deq_ptr_next_T_2, UInt<1>("h00"), _deq_ptr_next_T_4) @[Decoupled.scala 246:27]
    node _r_addr_T = mux(do_deq, deq_ptr_next, value_1) @[Decoupled.scala 247:33]
    wire r_addr : UInt
    r_addr <= _r_addr_T
    node _io_deq_bits_T = or(r_addr, UInt<1>("h00")) @[Decoupled.scala 248:28]
    node _io_deq_bits_T_1 = bits(_io_deq_bits_T, 0, 0) @[Decoupled.scala 248:28]
    read mport io_deq_bits_MPORT = ram[_io_deq_bits_T_1], clock @[Decoupled.scala 248:28]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 248:17]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 267:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 267:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 269:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h02"), UInt<1>("h00")) @[Decoupled.scala 269:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 269:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 269:14]
    
  module MaxPeriodFibonacciLFSR : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 38:28]
    _state_WIRE[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _state_WIRE[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[15] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _state_WIRE)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module QueueFactoryTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>} @[QueueSpec.scala 173:17]
    inst deq of Queue @[Decoupled.scala 307:21]
    deq.clock <= clock
    deq.reset <= reset
    deq.io.enq.valid <= enq.valid @[Decoupled.scala 308:22]
    deq.io.enq.bits <= enq.bits @[Decoupled.scala 309:21]
    enq.ready <= deq.io.enq.ready @[Decoupled.scala 310:17]
    wire elems : UInt<4>[20] @[QueueSpec.scala 176:22]
    elems[0] <= UInt<4>("h0e") @[QueueSpec.scala 176:22]
    elems[1] <= UInt<4>("h08") @[QueueSpec.scala 176:22]
    elems[2] <= UInt<4>("h0e") @[QueueSpec.scala 176:22]
    elems[3] <= UInt<4>("h0d") @[QueueSpec.scala 176:22]
    elems[4] <= UInt<2>("h03") @[QueueSpec.scala 176:22]
    elems[5] <= UInt<4>("h0e") @[QueueSpec.scala 176:22]
    elems[6] <= UInt<4>("h0f") @[QueueSpec.scala 176:22]
    elems[7] <= UInt<1>("h01") @[QueueSpec.scala 176:22]
    elems[8] <= UInt<4>("h0e") @[QueueSpec.scala 176:22]
    elems[9] <= UInt<3>("h06") @[QueueSpec.scala 176:22]
    elems[10] <= UInt<4>("h0c") @[QueueSpec.scala 176:22]
    elems[11] <= UInt<4>("h0c") @[QueueSpec.scala 176:22]
    elems[12] <= UInt<1>("h01") @[QueueSpec.scala 176:22]
    elems[13] <= UInt<3>("h04") @[QueueSpec.scala 176:22]
    elems[14] <= UInt<3>("h04") @[QueueSpec.scala 176:22]
    elems[15] <= UInt<4>("h08") @[QueueSpec.scala 176:22]
    elems[16] <= UInt<4>("h0b") @[QueueSpec.scala 176:22]
    elems[17] <= UInt<3>("h07") @[QueueSpec.scala 176:22]
    elems[18] <= UInt<3>("h05") @[QueueSpec.scala 176:22]
    elems[19] <= UInt<1>("h00") @[QueueSpec.scala 176:22]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 60:40]
    node _enq_valid_T = lt(value, UInt<5>("h014")) @[QueueSpec.scala 182:29]
    enq.valid <= _enq_valid_T @[QueueSpec.scala 182:13]
    inst deq_io_deq_ready_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 82:22]
    deq_io_deq_ready_prng.clock <= clock
    deq_io_deq_ready_prng.reset <= reset
    deq_io_deq_ready_prng.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
    deq_io_deq_ready_prng.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
    deq_io_deq_ready_prng.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
    node deq_io_deq_ready_lo_lo_lo = cat(deq_io_deq_ready_prng.io.out[1], deq_io_deq_ready_prng.io.out[0]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo_lo_hi = cat(deq_io_deq_ready_prng.io.out[3], deq_io_deq_ready_prng.io.out[2]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo_lo = cat(deq_io_deq_ready_lo_lo_hi, deq_io_deq_ready_lo_lo_lo) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo_hi_lo = cat(deq_io_deq_ready_prng.io.out[5], deq_io_deq_ready_prng.io.out[4]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo_hi_hi = cat(deq_io_deq_ready_prng.io.out[7], deq_io_deq_ready_prng.io.out[6]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo_hi = cat(deq_io_deq_ready_lo_hi_hi, deq_io_deq_ready_lo_hi_lo) @[PRNG.scala 86:17]
    node deq_io_deq_ready_lo = cat(deq_io_deq_ready_lo_hi, deq_io_deq_ready_lo_lo) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_lo_lo = cat(deq_io_deq_ready_prng.io.out[9], deq_io_deq_ready_prng.io.out[8]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_lo_hi = cat(deq_io_deq_ready_prng.io.out[11], deq_io_deq_ready_prng.io.out[10]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_lo = cat(deq_io_deq_ready_hi_lo_hi, deq_io_deq_ready_hi_lo_lo) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_hi_lo = cat(deq_io_deq_ready_prng.io.out[13], deq_io_deq_ready_prng.io.out[12]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_hi_hi = cat(deq_io_deq_ready_prng.io.out[15], deq_io_deq_ready_prng.io.out[14]) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi_hi = cat(deq_io_deq_ready_hi_hi_hi, deq_io_deq_ready_hi_hi_lo) @[PRNG.scala 86:17]
    node deq_io_deq_ready_hi = cat(deq_io_deq_ready_hi_hi, deq_io_deq_ready_hi_lo) @[PRNG.scala 86:17]
    node _deq_io_deq_ready_T = cat(deq_io_deq_ready_hi, deq_io_deq_ready_lo) @[PRNG.scala 86:17]
    node _deq_io_deq_ready_T_1 = bits(_deq_io_deq_ready_T, 1, 1) @[QueueSpec.scala 183:24]
    deq.io.deq.ready <= _deq_io_deq_ready_T_1 @[QueueSpec.scala 183:13]
    enq.bits <= elems[value] @[QueueSpec.scala 185:12]
    node _T = and(enq.ready, enq.valid) @[Decoupled.scala 40:37]
    when _T : @[QueueSpec.scala 186:20]
      node wrap = eq(value, UInt<5>("h014")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h00") @[Counter.scala 86:28]
        skip @[Counter.scala 86:20]
      skip @[QueueSpec.scala 186:20]
    node _T_1 = and(deq.io.deq.ready, deq.io.deq.valid) @[Decoupled.scala 40:37]
    when _T_1 : @[QueueSpec.scala 189:20]
      node _T_2 = eq(elems[value_1], deq.io.deq.bits) @[QueueSpec.scala 191:32]
      node _T_3 = bits(reset, 0, 0) @[QueueSpec.scala 191:11]
      node _T_4 = or(_T_2, _T_3) @[QueueSpec.scala 191:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[QueueSpec.scala 191:11]
      when _T_5 : @[QueueSpec.scala 191:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at QueueSpec.scala:191 assert(elems(outCnt.value) === deq.bits)\n") @[QueueSpec.scala 191:11]
        stop(clock, UInt<1>(1), 1) @[QueueSpec.scala 191:11]
        skip @[QueueSpec.scala 191:11]
      node wrap_1 = eq(value_1, UInt<5>("h014")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h00") @[Counter.scala 86:28]
        skip @[Counter.scala 86:20]
      skip @[QueueSpec.scala 189:20]
    node _T_6 = eq(value_1, UInt<5>("h014")) @[QueueSpec.scala 194:21]
    when _T_6 : @[QueueSpec.scala 194:44]
      node _T_7 = bits(reset, 0, 0) @[QueueSpec.scala 195:9]
      node _T_8 = eq(_T_7, UInt<1>("h00")) @[QueueSpec.scala 195:9]
      when _T_8 : @[QueueSpec.scala 195:9]
        stop(clock, UInt<1>(1), 0) @[QueueSpec.scala 195:9]
        skip @[QueueSpec.scala 195:9]
      skip @[QueueSpec.scala 194:44]
    
