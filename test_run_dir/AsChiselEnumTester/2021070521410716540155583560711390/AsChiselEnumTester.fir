;chisel3.BuildInfo$@527a8665
circuit AsChiselEnumTester : 
  module AsChiselEnumTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire _WIRE : UInt<2> @[AsTypeOfTester.scala 95:22]
    _WIRE <= UInt<2>("h02") @[AsTypeOfTester.scala 95:22]
    node _T = eq(_WIRE, UInt<2>("h02")) @[AsTypeOfTester.scala 95:33]
    node _T_1 = bits(reset, 0, 0) @[AsTypeOfTester.scala 95:9]
    node _T_2 = or(_T, _T_1) @[AsTypeOfTester.scala 95:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[AsTypeOfTester.scala 95:9]
    when _T_3 : @[AsTypeOfTester.scala 95:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:95 assert(2.U.asTypeOf(MyEnum()) === MyEnum.fizz)\n") @[AsTypeOfTester.scala 95:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 95:9]
      skip @[AsTypeOfTester.scala 95:9]
    wire _WIRE_1 : UInt<1>[2] @[AsTypeOfTester.scala 96:17]
    _WIRE_1[0] <= UInt<1>("h00") @[AsTypeOfTester.scala 96:17]
    _WIRE_1[1] <= UInt<1>("h01") @[AsTypeOfTester.scala 96:17]
    wire _WIRE_2 : UInt<2> @[AsTypeOfTester.scala 96:39]
    node _T_4 = cat(_WIRE_1[1], _WIRE_1[0]) @[AsTypeOfTester.scala 96:39]
    wire _WIRE_3 : UInt<2> @[AsTypeOfTester.scala 96:39]
    _WIRE_3 <= _T_4 @[AsTypeOfTester.scala 96:39]
    wire _WIRE_4 : UInt<2> @[AsTypeOfTester.scala 96:39]
    _WIRE_4 <= _WIRE_3 @[AsTypeOfTester.scala 96:39]
    _WIRE_2 <= _WIRE_4 @[AsTypeOfTester.scala 96:39]
    node _T_5 = eq(_WIRE_2, UInt<2>("h02")) @[AsTypeOfTester.scala 96:50]
    node _T_6 = bits(reset, 0, 0) @[AsTypeOfTester.scala 96:9]
    node _T_7 = or(_T_5, _T_6) @[AsTypeOfTester.scala 96:9]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[AsTypeOfTester.scala 96:9]
    when _T_8 : @[AsTypeOfTester.scala 96:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:96 assert(VecInit(2.U.asBools).asTypeOf(MyEnum()) === MyEnum.fizz)\n") @[AsTypeOfTester.scala 96:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 96:9]
      skip @[AsTypeOfTester.scala 96:9]
    wire _WIRE_5 : {a : UInt<1>, b : UInt<1>} @[AsTypeOfTester.scala 97:22]
    _WIRE_5.b <= UInt<1>("h00") @[AsTypeOfTester.scala 97:22]
    _WIRE_5.a <= UInt<1>("h01") @[AsTypeOfTester.scala 97:22]
    wire _WIRE_6 : UInt<2> @[AsTypeOfTester.scala 97:45]
    node _T_9 = cat(_WIRE_5.a, _WIRE_5.b) @[AsTypeOfTester.scala 97:45]
    wire _WIRE_7 : UInt<2> @[AsTypeOfTester.scala 97:45]
    _WIRE_7 <= _T_9 @[AsTypeOfTester.scala 97:45]
    wire _WIRE_8 : UInt<2> @[AsTypeOfTester.scala 97:45]
    _WIRE_8 <= _WIRE_7 @[AsTypeOfTester.scala 97:45]
    _WIRE_6 <= _WIRE_8 @[AsTypeOfTester.scala 97:45]
    node _T_10 = eq(_WIRE_6, UInt<2>("h02")) @[AsTypeOfTester.scala 97:56]
    node _T_11 = bits(reset, 0, 0) @[AsTypeOfTester.scala 97:9]
    node _T_12 = or(_T_10, _T_11) @[AsTypeOfTester.scala 97:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[AsTypeOfTester.scala 97:9]
    when _T_13 : @[AsTypeOfTester.scala 97:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:97 assert(2.U.asTypeOf(new MyBundle).asTypeOf(MyEnum()) === MyEnum.fizz)\n") @[AsTypeOfTester.scala 97:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 97:9]
      skip @[AsTypeOfTester.scala 97:9]
    node _T_14 = asUInt(UInt<1>("h00")) @[AsTypeOfTester.scala 100:21]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[AsTypeOfTester.scala 100:28]
    node _T_16 = bits(reset, 0, 0) @[AsTypeOfTester.scala 100:9]
    node _T_17 = or(_T_15, _T_16) @[AsTypeOfTester.scala 100:9]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[AsTypeOfTester.scala 100:9]
    when _T_18 : @[AsTypeOfTester.scala 100:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:100 assert(MyEnum.foo.asUInt === 0.U)\n") @[AsTypeOfTester.scala 100:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 100:9]
      skip @[AsTypeOfTester.scala 100:9]
    wire vec : UInt<1>[2] @[AsTypeOfTester.scala 101:32]
    node _vec_T = asUInt(UInt<1>("h01")) @[AsTypeOfTester.scala 101:32]
    wire _vec_WIRE : UInt<2>
    _vec_WIRE <= _vec_T
    node _vec_T_1 = bits(_vec_WIRE, 0, 0) @[AsTypeOfTester.scala 101:32]
    vec[0] <= _vec_T_1 @[AsTypeOfTester.scala 101:32]
    node _vec_T_2 = bits(_vec_WIRE, 1, 1) @[AsTypeOfTester.scala 101:32]
    vec[1] <= _vec_T_2 @[AsTypeOfTester.scala 101:32]
    node _T_19 = eq(vec[0], UInt<1>("h01")) @[AsTypeOfTester.scala 102:17]
    node _T_20 = bits(reset, 0, 0) @[AsTypeOfTester.scala 102:9]
    node _T_21 = or(_T_19, _T_20) @[AsTypeOfTester.scala 102:9]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[AsTypeOfTester.scala 102:9]
    when _T_22 : @[AsTypeOfTester.scala 102:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:102 assert(vec(0) === 1.U)\n") @[AsTypeOfTester.scala 102:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 102:9]
      skip @[AsTypeOfTester.scala 102:9]
    node _T_23 = eq(vec[1], UInt<1>("h00")) @[AsTypeOfTester.scala 103:17]
    node _T_24 = bits(reset, 0, 0) @[AsTypeOfTester.scala 103:9]
    node _T_25 = or(_T_23, _T_24) @[AsTypeOfTester.scala 103:9]
    node _T_26 = eq(_T_25, UInt<1>("h00")) @[AsTypeOfTester.scala 103:9]
    when _T_26 : @[AsTypeOfTester.scala 103:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:103 assert(vec(1) === 0.U)\n") @[AsTypeOfTester.scala 103:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 103:9]
      skip @[AsTypeOfTester.scala 103:9]
    wire bun : {a : UInt<1>, b : UInt<1>} @[AsTypeOfTester.scala 104:33]
    node _bun_T = asUInt(UInt<2>("h02")) @[AsTypeOfTester.scala 104:33]
    wire _bun_WIRE : UInt<2>
    _bun_WIRE <= _bun_T
    node _bun_T_1 = bits(_bun_WIRE, 0, 0) @[AsTypeOfTester.scala 104:33]
    bun.b <= _bun_T_1 @[AsTypeOfTester.scala 104:33]
    node _bun_T_2 = bits(_bun_WIRE, 1, 1) @[AsTypeOfTester.scala 104:33]
    bun.a <= _bun_T_2 @[AsTypeOfTester.scala 104:33]
    node _T_27 = eq(bun.b, UInt<1>("h00")) @[AsTypeOfTester.scala 105:16]
    node _T_28 = bits(reset, 0, 0) @[AsTypeOfTester.scala 105:9]
    node _T_29 = or(_T_27, _T_28) @[AsTypeOfTester.scala 105:9]
    node _T_30 = eq(_T_29, UInt<1>("h00")) @[AsTypeOfTester.scala 105:9]
    when _T_30 : @[AsTypeOfTester.scala 105:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:105 assert(bun.b === 0.U)\n") @[AsTypeOfTester.scala 105:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 105:9]
      skip @[AsTypeOfTester.scala 105:9]
    node _T_31 = eq(bun.a, UInt<1>("h01")) @[AsTypeOfTester.scala 106:16]
    node _T_32 = bits(reset, 0, 0) @[AsTypeOfTester.scala 106:9]
    node _T_33 = or(_T_31, _T_32) @[AsTypeOfTester.scala 106:9]
    node _T_34 = eq(_T_33, UInt<1>("h00")) @[AsTypeOfTester.scala 106:9]
    when _T_34 : @[AsTypeOfTester.scala 106:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:106 assert(bun.a === 1.U)\n") @[AsTypeOfTester.scala 106:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 106:9]
      skip @[AsTypeOfTester.scala 106:9]
    wire wire : {enum : UInt<2>, foo : UInt<1>} @[AsTypeOfTester.scala 113:18]
    wire.enum <= UInt<2>("h02") @[AsTypeOfTester.scala 114:13]
    wire.foo <= UInt<1>("h01") @[AsTypeOfTester.scala 115:12]
    node hi = asUInt(wire.enum) @[AsTypeOfTester.scala 117:15]
    node _T_35 = cat(hi, wire.foo) @[AsTypeOfTester.scala 117:15]
    node _T_36 = eq(_T_35, UInt<3>("h05")) @[AsTypeOfTester.scala 117:22]
    node _T_37 = bits(reset, 0, 0) @[AsTypeOfTester.scala 117:9]
    node _T_38 = or(_T_36, _T_37) @[AsTypeOfTester.scala 117:9]
    node _T_39 = eq(_T_38, UInt<1>("h00")) @[AsTypeOfTester.scala 117:9]
    when _T_39 : @[AsTypeOfTester.scala 117:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:117 assert(wire.asUInt === 5.U)\n") @[AsTypeOfTester.scala 117:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 117:9]
      skip @[AsTypeOfTester.scala 117:9]
    wire other : {enum : UInt<2>, foo : UInt<1>} @[AsTypeOfTester.scala 118:27]
    other.foo <= UInt<1>("h01") @[AsTypeOfTester.scala 118:27]
    other.enum <= UInt<2>("h02") @[AsTypeOfTester.scala 118:27]
    node _T_40 = eq(other.enum, UInt<2>("h02")) @[AsTypeOfTester.scala 119:21]
    node _T_41 = bits(reset, 0, 0) @[AsTypeOfTester.scala 119:9]
    node _T_42 = or(_T_40, _T_41) @[AsTypeOfTester.scala 119:9]
    node _T_43 = eq(_T_42, UInt<1>("h00")) @[AsTypeOfTester.scala 119:9]
    when _T_43 : @[AsTypeOfTester.scala 119:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:119 assert(other.enum === MyEnum.fizz)\n") @[AsTypeOfTester.scala 119:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 119:9]
      skip @[AsTypeOfTester.scala 119:9]
    node _T_44 = eq(other.foo, UInt<1>("h01")) @[AsTypeOfTester.scala 120:20]
    node _T_45 = bits(reset, 0, 0) @[AsTypeOfTester.scala 120:9]
    node _T_46 = or(_T_44, _T_45) @[AsTypeOfTester.scala 120:9]
    node _T_47 = eq(_T_46, UInt<1>("h00")) @[AsTypeOfTester.scala 120:9]
    when _T_47 : @[AsTypeOfTester.scala 120:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AsTypeOfTester.scala:120 assert(other.foo === true.B)\n") @[AsTypeOfTester.scala 120:9]
      stop(clock, UInt<1>(1), 1) @[AsTypeOfTester.scala 120:9]
      skip @[AsTypeOfTester.scala 120:9]
    node _T_48 = bits(reset, 0, 0) @[AsTypeOfTester.scala 122:7]
    node _T_49 = eq(_T_48, UInt<1>("h00")) @[AsTypeOfTester.scala 122:7]
    when _T_49 : @[AsTypeOfTester.scala 122:7]
      stop(clock, UInt<1>(1), 0) @[AsTypeOfTester.scala 122:7]
      skip @[AsTypeOfTester.scala 122:7]
    
