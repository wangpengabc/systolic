;chisel3.BuildInfo$@527a8665
circuit BundleLiteralSpec_Anon : 
  module BundleLiteralSpec_Anon : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _T = eq(UInt<6>("h02a"), UInt<6>("h02a")) @[BundleLiteralSpec.scala 126:44]
    node _T_1 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 126:21]
    node _T_2 = or(_T, _T_1) @[BundleLiteralSpec.scala 126:21]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[BundleLiteralSpec.scala 126:21]
    when _T_3 : @[BundleLiteralSpec.scala 126:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:126 chisel3.assert(explicitBundleLit.a.a === 42.U)\n") @[BundleLiteralSpec.scala 126:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 126:21]
      skip @[BundleLiteralSpec.scala 126:21]
    node _T_4 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 127:44]
    node _T_5 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 127:21]
    node _T_6 = or(_T_4, _T_5) @[BundleLiteralSpec.scala 127:21]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[BundleLiteralSpec.scala 127:21]
    when _T_7 : @[BundleLiteralSpec.scala 127:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:127 chisel3.assert(explicitBundleLit.a.b === true.B)\n") @[BundleLiteralSpec.scala 127:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 127:21]
      skip @[BundleLiteralSpec.scala 127:21]
    node _T_8 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 128:44]
    node _T_9 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 128:21]
    node _T_10 = or(_T_8, _T_9) @[BundleLiteralSpec.scala 128:21]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[BundleLiteralSpec.scala 128:21]
    when _T_11 : @[BundleLiteralSpec.scala 128:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:128 chisel3.assert(explicitBundleLit.a.c === MyEnum.sB)\n") @[BundleLiteralSpec.scala 128:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 128:21]
      skip @[BundleLiteralSpec.scala 128:21]
    node lo = asUInt(UInt<1>("h01")) @[BundleLiteralSpec.scala 130:85]
    node hi = cat(UInt<6>("h02a"), UInt<1>("h01")) @[BundleLiteralSpec.scala 130:85]
    node _T_12 = cat(hi, lo) @[BundleLiteralSpec.scala 130:85]
    node _T_13 = eq(UInt<8>("h0ab"), _T_12) @[BundleLiteralSpec.scala 130:55]
    node _T_14 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 130:21]
    node _T_15 = or(_T_13, _T_14) @[BundleLiteralSpec.scala 130:21]
    node _T_16 = eq(_T_15, UInt<1>("h00")) @[BundleLiteralSpec.scala 130:21]
    when _T_16 : @[BundleLiteralSpec.scala 130:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:130 chisel3.assert(explicitBundleLit.a.litValue().U === explicitBundleLit.a.asUInt())\n") @[BundleLiteralSpec.scala 130:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 130:21]
      skip @[BundleLiteralSpec.scala 130:21]
    node _T_17 = eq(UInt<6>("h02a"), UInt<6>("h02a")) @[BundleLiteralSpec.scala 138:44]
    node _T_18 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 138:21]
    node _T_19 = or(_T_17, _T_18) @[BundleLiteralSpec.scala 138:21]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[BundleLiteralSpec.scala 138:21]
    when _T_20 : @[BundleLiteralSpec.scala 138:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:138 chisel3.assert(expandedBundleLit.a.a === 42.U)\n") @[BundleLiteralSpec.scala 138:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 138:21]
      skip @[BundleLiteralSpec.scala 138:21]
    node _T_21 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 139:44]
    node _T_22 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 139:21]
    node _T_23 = or(_T_21, _T_22) @[BundleLiteralSpec.scala 139:21]
    node _T_24 = eq(_T_23, UInt<1>("h00")) @[BundleLiteralSpec.scala 139:21]
    when _T_24 : @[BundleLiteralSpec.scala 139:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:139 chisel3.assert(expandedBundleLit.a.b === true.B)\n") @[BundleLiteralSpec.scala 139:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 139:21]
      skip @[BundleLiteralSpec.scala 139:21]
    node _T_25 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 140:42]
    node _T_26 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 140:21]
    node _T_27 = or(_T_25, _T_26) @[BundleLiteralSpec.scala 140:21]
    node _T_28 = eq(_T_27, UInt<1>("h00")) @[BundleLiteralSpec.scala 140:21]
    when _T_28 : @[BundleLiteralSpec.scala 140:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:140 chisel3.assert(expandedBundleLit.f === MyEnum.sB)\n") @[BundleLiteralSpec.scala 140:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 140:21]
      skip @[BundleLiteralSpec.scala 140:21]
    node _T_29 = eq(UInt<1>("h00"), UInt<1>("h00")) @[BundleLiteralSpec.scala 141:44]
    node _T_30 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 141:21]
    node _T_31 = or(_T_29, _T_30) @[BundleLiteralSpec.scala 141:21]
    node _T_32 = eq(_T_31, UInt<1>("h00")) @[BundleLiteralSpec.scala 141:21]
    when _T_32 : @[BundleLiteralSpec.scala 141:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:141 chisel3.assert(expandedBundleLit.b.c === false.B)\n") @[BundleLiteralSpec.scala 141:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 141:21]
      skip @[BundleLiteralSpec.scala 141:21]
    node _T_33 = eq(UInt<8>("h0ff"), UInt<8>("h0ff")) @[BundleLiteralSpec.scala 142:44]
    node _T_34 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 142:21]
    node _T_35 = or(_T_33, _T_34) @[BundleLiteralSpec.scala 142:21]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[BundleLiteralSpec.scala 142:21]
    when _T_36 : @[BundleLiteralSpec.scala 142:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:142 chisel3.assert(expandedBundleLit.b.d === 255.U)\n") @[BundleLiteralSpec.scala 142:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 142:21]
      skip @[BundleLiteralSpec.scala 142:21]
    node _T_37 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 143:44]
    node _T_38 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 143:21]
    node _T_39 = or(_T_37, _T_38) @[BundleLiteralSpec.scala 143:21]
    node _T_40 = eq(_T_39, UInt<1>("h00")) @[BundleLiteralSpec.scala 143:21]
    when _T_40 : @[BundleLiteralSpec.scala 143:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:143 chisel3.assert(expandedBundleLit.b.e === MyEnum.sB)\n") @[BundleLiteralSpec.scala 143:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 143:21]
      skip @[BundleLiteralSpec.scala 143:21]
    node lo_1 = asUInt(UInt<1>("h01")) @[BundleLiteralSpec.scala 147:85]
    node hi_1 = cat(UInt<1>("h00"), UInt<8>("h0ff")) @[BundleLiteralSpec.scala 147:85]
    node _T_41 = cat(hi_1, lo_1) @[BundleLiteralSpec.scala 147:85]
    node _T_42 = eq(UInt<9>("h01ff"), _T_41) @[BundleLiteralSpec.scala 147:55]
    node _T_43 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 147:21]
    node _T_44 = or(_T_42, _T_43) @[BundleLiteralSpec.scala 147:21]
    node _T_45 = eq(_T_44, UInt<1>("h00")) @[BundleLiteralSpec.scala 147:21]
    when _T_45 : @[BundleLiteralSpec.scala 147:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:147 chisel3.assert(expandedBundleLit.b.litValue().U === expandedBundleLit.b.asUInt())\n") @[BundleLiteralSpec.scala 147:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 147:21]
      skip @[BundleLiteralSpec.scala 147:21]
    node _T_46 = eq(UInt<1>("h00"), UInt<1>("h00")) @[BundleLiteralSpec.scala 154:41]
    node _T_47 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 154:21]
    node _T_48 = or(_T_46, _T_47) @[BundleLiteralSpec.scala 154:21]
    node _T_49 = eq(_T_48, UInt<1>("h00")) @[BundleLiteralSpec.scala 154:21]
    when _T_49 : @[BundleLiteralSpec.scala 154:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:154 chisel3.assert(childBundleLit.b.c === false.B)\n") @[BundleLiteralSpec.scala 154:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 154:21]
      skip @[BundleLiteralSpec.scala 154:21]
    node _T_50 = eq(UInt<8>("h0ff"), UInt<8>("h0ff")) @[BundleLiteralSpec.scala 155:41]
    node _T_51 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 155:21]
    node _T_52 = or(_T_50, _T_51) @[BundleLiteralSpec.scala 155:21]
    node _T_53 = eq(_T_52, UInt<1>("h00")) @[BundleLiteralSpec.scala 155:21]
    when _T_53 : @[BundleLiteralSpec.scala 155:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:155 chisel3.assert(childBundleLit.b.d === 255.U)\n") @[BundleLiteralSpec.scala 155:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 155:21]
      skip @[BundleLiteralSpec.scala 155:21]
    node _T_54 = eq(UInt<1>("h01"), UInt<1>("h01")) @[BundleLiteralSpec.scala 156:41]
    node _T_55 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 156:21]
    node _T_56 = or(_T_54, _T_55) @[BundleLiteralSpec.scala 156:21]
    node _T_57 = eq(_T_56, UInt<1>("h00")) @[BundleLiteralSpec.scala 156:21]
    when _T_57 : @[BundleLiteralSpec.scala 156:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:156 chisel3.assert(childBundleLit.b.e === MyEnum.sB)\n") @[BundleLiteralSpec.scala 156:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 156:21]
      skip @[BundleLiteralSpec.scala 156:21]
    node lo_2 = asUInt(UInt<1>("h01")) @[BundleLiteralSpec.scala 159:79]
    node hi_2 = cat(UInt<1>("h00"), UInt<8>("h0ff")) @[BundleLiteralSpec.scala 159:79]
    node _T_58 = cat(hi_2, lo_2) @[BundleLiteralSpec.scala 159:79]
    node _T_59 = eq(UInt<9>("h01ff"), _T_58) @[BundleLiteralSpec.scala 159:52]
    node _T_60 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 159:21]
    node _T_61 = or(_T_59, _T_60) @[BundleLiteralSpec.scala 159:21]
    node _T_62 = eq(_T_61, UInt<1>("h00")) @[BundleLiteralSpec.scala 159:21]
    when _T_62 : @[BundleLiteralSpec.scala 159:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:159 chisel3.assert(childBundleLit.b.litValue().U === childBundleLit.b.asUInt())\n") @[BundleLiteralSpec.scala 159:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 159:21]
      skip @[BundleLiteralSpec.scala 159:21]
    node _T_63 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 161:11]
    node _T_64 = eq(_T_63, UInt<1>("h00")) @[BundleLiteralSpec.scala 161:11]
    when _T_64 : @[BundleLiteralSpec.scala 161:11]
      stop(clock, UInt<1>(1), 0) @[BundleLiteralSpec.scala 161:11]
      skip @[BundleLiteralSpec.scala 161:11]
    
