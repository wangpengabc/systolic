;chisel3.BuildInfo$@527a8665
circuit BundleLiteralSpec_Anon : 
  module BundleLiteralSpec_Anon : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _T = eq(UInt<4>("h0a"), UInt<4>("h0a")) @[BundleLiteralSpec.scala 88:42]
    node _T_1 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 88:21]
    node _T_2 = or(_T, _T_1) @[BundleLiteralSpec.scala 88:21]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[BundleLiteralSpec.scala 88:21]
    when _T_3 : @[BundleLiteralSpec.scala 88:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:88 chisel3.assert(bundleWithVecs.a(0) === 0xA.U)\n") @[BundleLiteralSpec.scala 88:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 88:21]
      skip @[BundleLiteralSpec.scala 88:21]
    node _T_4 = eq(UInt<4>("h0b"), UInt<4>("h0b")) @[BundleLiteralSpec.scala 89:42]
    node _T_5 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 89:21]
    node _T_6 = or(_T_4, _T_5) @[BundleLiteralSpec.scala 89:21]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[BundleLiteralSpec.scala 89:21]
    when _T_7 : @[BundleLiteralSpec.scala 89:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:89 chisel3.assert(bundleWithVecs.a(1) === 0xB.U)\n") @[BundleLiteralSpec.scala 89:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 89:21]
      skip @[BundleLiteralSpec.scala 89:21]
    node _T_8 = eq(asInterval(UInt<6>("h06"), 6, 6, 2), asInterval(UInt<6>("h06"), 6, 6, 2)) @[BundleLiteralSpec.scala 90:42]
    node _T_9 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 90:21]
    node _T_10 = or(_T_8, _T_9) @[BundleLiteralSpec.scala 90:21]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[BundleLiteralSpec.scala 90:21]
    when _T_11 : @[BundleLiteralSpec.scala 90:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:90 chisel3.assert(bundleWithVecs.b(0) === (1.5).I(range))\n") @[BundleLiteralSpec.scala 90:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 90:21]
      skip @[BundleLiteralSpec.scala 90:21]
    node _T_12 = eq(asInterval(UInt<6>("h01"), 1, 1, 2), asInterval(UInt<6>("h01"), 1, 1, 2)) @[BundleLiteralSpec.scala 91:42]
    node _T_13 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 91:21]
    node _T_14 = or(_T_12, _T_13) @[BundleLiteralSpec.scala 91:21]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[BundleLiteralSpec.scala 91:21]
    when _T_15 : @[BundleLiteralSpec.scala 91:21]
      printf(clock, UInt<1>(1), "Assertion failed\n    at BundleLiteralSpec.scala:91 chisel3.assert(bundleWithVecs.b(1) === (0.25).I(range))\n") @[BundleLiteralSpec.scala 91:21]
      stop(clock, UInt<1>(1), 1) @[BundleLiteralSpec.scala 91:21]
      skip @[BundleLiteralSpec.scala 91:21]
    node _T_16 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 92:11]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[BundleLiteralSpec.scala 92:11]
    when _T_17 : @[BundleLiteralSpec.scala 92:11]
      stop(clock, UInt<1>(1), 0) @[BundleLiteralSpec.scala 92:11]
      skip @[BundleLiteralSpec.scala 92:11]
    
