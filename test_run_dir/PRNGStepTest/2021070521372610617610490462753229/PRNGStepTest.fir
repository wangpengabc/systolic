;chisel3.BuildInfo$@527a8665
circuit PRNGStepTest : 
  module CyclePRNG : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 38:28]
    _state_WIRE[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _state_WIRE[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[15] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _state_WIRE)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      state[0] <= state[15] @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module CyclePRNG_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 38:28]
    _state_WIRE[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _state_WIRE[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[15] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _state_WIRE)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      state[0] <= state[14] @[PRNG.scala 62:11]
      state[1] <= state[15] @[PRNG.scala 62:11]
      state[2] <= state[0] @[PRNG.scala 62:11]
      state[3] <= state[1] @[PRNG.scala 62:11]
      state[4] <= state[2] @[PRNG.scala 62:11]
      state[5] <= state[3] @[PRNG.scala 62:11]
      state[6] <= state[4] @[PRNG.scala 62:11]
      state[7] <= state[5] @[PRNG.scala 62:11]
      state[8] <= state[6] @[PRNG.scala 62:11]
      state[9] <= state[7] @[PRNG.scala 62:11]
      state[10] <= state[8] @[PRNG.scala 62:11]
      state[11] <= state[9] @[PRNG.scala 62:11]
      state[12] <= state[10] @[PRNG.scala 62:11]
      state[13] <= state[11] @[PRNG.scala 62:11]
      state[14] <= state[12] @[PRNG.scala 62:11]
      state[15] <= state[13] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module CyclePRNG_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 38:28]
    _state_WIRE[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _state_WIRE[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[15] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _state_WIRE)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      state[0] <= state[12] @[PRNG.scala 62:11]
      state[1] <= state[13] @[PRNG.scala 62:11]
      state[2] <= state[14] @[PRNG.scala 62:11]
      state[3] <= state[15] @[PRNG.scala 62:11]
      state[4] <= state[0] @[PRNG.scala 62:11]
      state[5] <= state[1] @[PRNG.scala 62:11]
      state[6] <= state[2] @[PRNG.scala 62:11]
      state[7] <= state[3] @[PRNG.scala 62:11]
      state[8] <= state[4] @[PRNG.scala 62:11]
      state[9] <= state[5] @[PRNG.scala 62:11]
      state[10] <= state[6] @[PRNG.scala 62:11]
      state[11] <= state[7] @[PRNG.scala 62:11]
      state[12] <= state[8] @[PRNG.scala 62:11]
      state[13] <= state[9] @[PRNG.scala 62:11]
      state[14] <= state[10] @[PRNG.scala 62:11]
      state[15] <= state[11] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module PRNGStepTest : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg count2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 60:40]
    wire count2_wrap : UInt<1>
    count2_wrap <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node count2_wrap_wrap = eq(count2, UInt<1>("h01")) @[Counter.scala 72:24]
      node _count2_wrap_value_T = add(count2, UInt<1>("h01")) @[Counter.scala 76:24]
      node _count2_wrap_value_T_1 = tail(_count2_wrap_value_T, 1) @[Counter.scala 76:24]
      count2 <= _count2_wrap_value_T_1 @[Counter.scala 76:15]
      count2_wrap <= count2_wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    reg count4 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    wire count4_wrap : UInt<1>
    count4_wrap <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node count4_wrap_wrap = eq(count4, UInt<2>("h03")) @[Counter.scala 72:24]
      node _count4_wrap_value_T = add(count4, UInt<1>("h01")) @[Counter.scala 76:24]
      node _count4_wrap_value_T_1 = tail(_count4_wrap_value_T, 1) @[Counter.scala 76:24]
      count4 <= _count4_wrap_value_T_1 @[Counter.scala 76:15]
      count4_wrap <= count4_wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    inst a_prng of CyclePRNG @[PRNG.scala 82:22]
    a_prng.clock <= clock
    a_prng.reset <= reset
    a_prng.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
    a_prng.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
    a_prng.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
    a_prng.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
    node a_lo_lo_lo = cat(a_prng.io.out[1], a_prng.io.out[0]) @[PRNG.scala 86:17]
    node a_lo_lo_hi = cat(a_prng.io.out[3], a_prng.io.out[2]) @[PRNG.scala 86:17]
    node a_lo_lo = cat(a_lo_lo_hi, a_lo_lo_lo) @[PRNG.scala 86:17]
    node a_lo_hi_lo = cat(a_prng.io.out[5], a_prng.io.out[4]) @[PRNG.scala 86:17]
    node a_lo_hi_hi = cat(a_prng.io.out[7], a_prng.io.out[6]) @[PRNG.scala 86:17]
    node a_lo_hi = cat(a_lo_hi_hi, a_lo_hi_lo) @[PRNG.scala 86:17]
    node a_lo = cat(a_lo_hi, a_lo_lo) @[PRNG.scala 86:17]
    node a_hi_lo_lo = cat(a_prng.io.out[9], a_prng.io.out[8]) @[PRNG.scala 86:17]
    node a_hi_lo_hi = cat(a_prng.io.out[11], a_prng.io.out[10]) @[PRNG.scala 86:17]
    node a_hi_lo = cat(a_hi_lo_hi, a_hi_lo_lo) @[PRNG.scala 86:17]
    node a_hi_hi_lo = cat(a_prng.io.out[13], a_prng.io.out[12]) @[PRNG.scala 86:17]
    node a_hi_hi_hi = cat(a_prng.io.out[15], a_prng.io.out[14]) @[PRNG.scala 86:17]
    node a_hi_hi = cat(a_hi_hi_hi, a_hi_hi_lo) @[PRNG.scala 86:17]
    node a_hi = cat(a_hi_hi, a_hi_lo) @[PRNG.scala 86:17]
    node a = cat(a_hi, a_lo) @[PRNG.scala 86:17]
    node _b_T = eq(count2, UInt<1>("h01")) @[PRNGSpec.scala 26:67]
    inst b_prng of CyclePRNG_1 @[PRNG.scala 82:22]
    b_prng.clock <= clock
    b_prng.reset <= reset
    b_prng.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
    b_prng.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
    b_prng.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
    b_prng.io.increment <= _b_T @[PRNG.scala 85:23]
    node b_lo_lo_lo = cat(b_prng.io.out[1], b_prng.io.out[0]) @[PRNG.scala 86:17]
    node b_lo_lo_hi = cat(b_prng.io.out[3], b_prng.io.out[2]) @[PRNG.scala 86:17]
    node b_lo_lo = cat(b_lo_lo_hi, b_lo_lo_lo) @[PRNG.scala 86:17]
    node b_lo_hi_lo = cat(b_prng.io.out[5], b_prng.io.out[4]) @[PRNG.scala 86:17]
    node b_lo_hi_hi = cat(b_prng.io.out[7], b_prng.io.out[6]) @[PRNG.scala 86:17]
    node b_lo_hi = cat(b_lo_hi_hi, b_lo_hi_lo) @[PRNG.scala 86:17]
    node b_lo = cat(b_lo_hi, b_lo_lo) @[PRNG.scala 86:17]
    node b_hi_lo_lo = cat(b_prng.io.out[9], b_prng.io.out[8]) @[PRNG.scala 86:17]
    node b_hi_lo_hi = cat(b_prng.io.out[11], b_prng.io.out[10]) @[PRNG.scala 86:17]
    node b_hi_lo = cat(b_hi_lo_hi, b_hi_lo_lo) @[PRNG.scala 86:17]
    node b_hi_hi_lo = cat(b_prng.io.out[13], b_prng.io.out[12]) @[PRNG.scala 86:17]
    node b_hi_hi_hi = cat(b_prng.io.out[15], b_prng.io.out[14]) @[PRNG.scala 86:17]
    node b_hi_hi = cat(b_hi_hi_hi, b_hi_hi_lo) @[PRNG.scala 86:17]
    node b_hi = cat(b_hi_hi, b_hi_lo) @[PRNG.scala 86:17]
    node b = cat(b_hi, b_lo) @[PRNG.scala 86:17]
    node _c_T = eq(count4, UInt<2>("h03")) @[PRNGSpec.scala 27:67]
    inst c_prng of CyclePRNG_2 @[PRNG.scala 82:22]
    c_prng.clock <= clock
    c_prng.reset <= reset
    c_prng.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
    c_prng.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
    c_prng.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
    c_prng.io.increment <= _c_T @[PRNG.scala 85:23]
    node c_lo_lo_lo = cat(c_prng.io.out[1], c_prng.io.out[0]) @[PRNG.scala 86:17]
    node c_lo_lo_hi = cat(c_prng.io.out[3], c_prng.io.out[2]) @[PRNG.scala 86:17]
    node c_lo_lo = cat(c_lo_lo_hi, c_lo_lo_lo) @[PRNG.scala 86:17]
    node c_lo_hi_lo = cat(c_prng.io.out[5], c_prng.io.out[4]) @[PRNG.scala 86:17]
    node c_lo_hi_hi = cat(c_prng.io.out[7], c_prng.io.out[6]) @[PRNG.scala 86:17]
    node c_lo_hi = cat(c_lo_hi_hi, c_lo_hi_lo) @[PRNG.scala 86:17]
    node c_lo = cat(c_lo_hi, c_lo_lo) @[PRNG.scala 86:17]
    node c_hi_lo_lo = cat(c_prng.io.out[9], c_prng.io.out[8]) @[PRNG.scala 86:17]
    node c_hi_lo_hi = cat(c_prng.io.out[11], c_prng.io.out[10]) @[PRNG.scala 86:17]
    node c_hi_lo = cat(c_hi_lo_hi, c_hi_lo_lo) @[PRNG.scala 86:17]
    node c_hi_hi_lo = cat(c_prng.io.out[13], c_prng.io.out[12]) @[PRNG.scala 86:17]
    node c_hi_hi_hi = cat(c_prng.io.out[15], c_prng.io.out[14]) @[PRNG.scala 86:17]
    node c_hi_hi = cat(c_hi_hi_hi, c_hi_hi_lo) @[PRNG.scala 86:17]
    node c_hi = cat(c_hi_hi, c_hi_lo) @[PRNG.scala 86:17]
    node c = cat(c_hi, c_lo) @[PRNG.scala 86:17]
    reg done_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    wire done : UInt<1>
    done <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node done_wrap_wrap = eq(done_value, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _done_wrap_value_T = add(done_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _done_wrap_value_T_1 = tail(_done_wrap_value_T, 1) @[Counter.scala 76:24]
      done_value <= _done_wrap_value_T_1 @[Counter.scala 76:15]
      done <= done_wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    node _T = eq(count2, UInt<1>("h00")) @[PRNGSpec.scala 31:16]
    when _T : @[PRNGSpec.scala 31:25]
      node _T_1 = eq(a, b) @[PRNGSpec.scala 32:14]
      node _T_2 = bits(reset, 0, 0) @[PRNGSpec.scala 32:11]
      node _T_3 = or(_T_1, _T_2) @[PRNGSpec.scala 32:11]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[PRNGSpec.scala 32:11]
      when _T_4 : @[PRNGSpec.scala 32:11]
        printf(clock, UInt<1>(1), "Assertion failed: 1-step and 2-step PRNGs did not agree! (0b%b != 0b%b)\n    at PRNGSpec.scala:32 assert(a === b, \"1-step and 2-step PRNGs did not agree! (0b%%b != 0b%%b)\", a, b)\n", a, b) @[PRNGSpec.scala 32:11]
        stop(clock, UInt<1>(1), 1) @[PRNGSpec.scala 32:11]
        skip @[PRNGSpec.scala 32:11]
      skip @[PRNGSpec.scala 31:25]
    node _T_5 = eq(count4, UInt<1>("h00")) @[PRNGSpec.scala 35:16]
    when _T_5 : @[PRNGSpec.scala 35:25]
      node _T_6 = eq(a, c) @[PRNGSpec.scala 36:14]
      node _T_7 = bits(reset, 0, 0) @[PRNGSpec.scala 36:11]
      node _T_8 = or(_T_6, _T_7) @[PRNGSpec.scala 36:11]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[PRNGSpec.scala 36:11]
      when _T_9 : @[PRNGSpec.scala 36:11]
        printf(clock, UInt<1>(1), "Assertion failed: 1-step and 4-step PRNGs did not agree!\n    at PRNGSpec.scala:36 assert(a === c, \"1-step and 4-step PRNGs did not agree!\")\n") @[PRNGSpec.scala 36:11]
        stop(clock, UInt<1>(1), 1) @[PRNGSpec.scala 36:11]
        skip @[PRNGSpec.scala 36:11]
      skip @[PRNGSpec.scala 35:25]
    when done : @[PRNGSpec.scala 39:15]
      node _T_10 = bits(reset, 0, 0) @[PRNGSpec.scala 40:9]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[PRNGSpec.scala 40:9]
      when _T_11 : @[PRNGSpec.scala 40:9]
        stop(clock, UInt<1>(1), 0) @[PRNGSpec.scala 40:9]
        skip @[PRNGSpec.scala 40:9]
      skip @[PRNGSpec.scala 39:15]
    
