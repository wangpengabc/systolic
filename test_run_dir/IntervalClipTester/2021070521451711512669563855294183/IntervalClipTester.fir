;chisel3.BuildInfo$@527a8665
circuit IntervalClipTester : 
  module IntervalClipTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire base : Interval[-4, 6].0 @[IntervalSpec.scala 326:18]
    wire enclosed : Interval[-2, 5].0 @[IntervalSpec.scala 327:22]
    wire enclosing : Interval[-6, 8].0 @[IntervalSpec.scala 328:23]
    wire overlapLeft : Interval[-10, -2].0 @[IntervalSpec.scala 329:25]
    wire overlapRight : Interval[-1, 10].0 @[IntervalSpec.scala 330:26]
    wire disjointLeft : Interval[-14, -7].0 @[IntervalSpec.scala 331:26]
    wire disjointRight : Interval[7, 11].0 @[IntervalSpec.scala 332:27]
    enclosed is invalid @[IntervalSpec.scala 334:12]
    enclosing is invalid @[IntervalSpec.scala 335:13]
    overlapLeft is invalid @[IntervalSpec.scala 336:15]
    overlapRight is invalid @[IntervalSpec.scala 337:16]
    disjointLeft is invalid @[IntervalSpec.scala 338:16]
    disjointRight is invalid @[IntervalSpec.scala 339:17]
    node enclosedResult = clip(base, enclosed) @[IntervalSpec.scala 341:33]
    node enclosingResult = clip(base, enclosing) @[IntervalSpec.scala 342:34]
    node overlapLeftResult = clip(base, overlapLeft) @[IntervalSpec.scala 343:36]
    node overlapRightResult = clip(base, overlapRight) @[IntervalSpec.scala 344:37]
    node disjointLeftResult = clip(base, disjointLeft) @[IntervalSpec.scala 345:37]
    node disjointRightResult = clip(base, disjointRight) @[IntervalSpec.scala 346:38]
    node _enclosedViaRangeString_T = asInterval(UInt<1>("h00"), -2, 5, 0) @[IntervalSpec.scala 347:41]
    node enclosedViaRangeString = clip(base, _enclosedViaRangeString_T) @[IntervalSpec.scala 347:41]
    base <= asInterval(UInt<4>("h06"), 6, 6, 0) @[IntervalSpec.scala 349:8]
    node _T = eq(enclosedResult, asInterval(UInt<4>("h05"), 5, 5, 0)) @[IntervalSpec.scala 351:25]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 351:9]
    node _T_2 = or(_T, _T_1) @[IntervalSpec.scala 351:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[IntervalSpec.scala 351:9]
    when _T_3 : @[IntervalSpec.scala 351:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:351 assert(enclosedResult === 5.I)\n") @[IntervalSpec.scala 351:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 351:9]
      skip @[IntervalSpec.scala 351:9]
    node _T_4 = eq(enclosingResult, asInterval(UInt<4>("h06"), 6, 6, 0)) @[IntervalSpec.scala 352:26]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 352:9]
    node _T_6 = or(_T_4, _T_5) @[IntervalSpec.scala 352:9]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[IntervalSpec.scala 352:9]
    when _T_7 : @[IntervalSpec.scala 352:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:352 assert(enclosingResult === 6.I)\n") @[IntervalSpec.scala 352:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 352:9]
      skip @[IntervalSpec.scala 352:9]
    node _T_8 = eq(overlapLeftResult, asInterval(UInt<2>("h02"), -2, -2, 0)) @[IntervalSpec.scala 353:28]
    node _T_9 = bits(reset, 0, 0) @[IntervalSpec.scala 353:9]
    node _T_10 = or(_T_8, _T_9) @[IntervalSpec.scala 353:9]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[IntervalSpec.scala 353:9]
    when _T_11 : @[IntervalSpec.scala 353:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:353 assert(overlapLeftResult === (-2).I)\n") @[IntervalSpec.scala 353:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 353:9]
      skip @[IntervalSpec.scala 353:9]
    node _T_12 = eq(overlapRightResult, asInterval(UInt<4>("h06"), 6, 6, 0)) @[IntervalSpec.scala 354:29]
    node _T_13 = bits(reset, 0, 0) @[IntervalSpec.scala 354:9]
    node _T_14 = or(_T_12, _T_13) @[IntervalSpec.scala 354:9]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[IntervalSpec.scala 354:9]
    when _T_15 : @[IntervalSpec.scala 354:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:354 assert(overlapRightResult === 6.I)\n") @[IntervalSpec.scala 354:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 354:9]
      skip @[IntervalSpec.scala 354:9]
    node _T_16 = eq(disjointLeftResult, asInterval(UInt<4>("h09"), -7, -7, 0)) @[IntervalSpec.scala 355:29]
    node _T_17 = bits(reset, 0, 0) @[IntervalSpec.scala 355:9]
    node _T_18 = or(_T_16, _T_17) @[IntervalSpec.scala 355:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[IntervalSpec.scala 355:9]
    when _T_19 : @[IntervalSpec.scala 355:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:355 assert(disjointLeftResult === (-7).I)\n") @[IntervalSpec.scala 355:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 355:9]
      skip @[IntervalSpec.scala 355:9]
    node _T_20 = eq(disjointRightResult, asInterval(UInt<4>("h07"), 7, 7, 0)) @[IntervalSpec.scala 356:30]
    node _T_21 = bits(reset, 0, 0) @[IntervalSpec.scala 356:9]
    node _T_22 = or(_T_20, _T_21) @[IntervalSpec.scala 356:9]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[IntervalSpec.scala 356:9]
    when _T_23 : @[IntervalSpec.scala 356:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:356 assert(disjointRightResult === 7.I)\n") @[IntervalSpec.scala 356:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 356:9]
      skip @[IntervalSpec.scala 356:9]
    node _T_24 = eq(enclosedViaRangeString, asInterval(UInt<4>("h05"), 5, 5, 0)) @[IntervalSpec.scala 358:33]
    node _T_25 = bits(reset, 0, 0) @[IntervalSpec.scala 358:9]
    node _T_26 = or(_T_24, _T_25) @[IntervalSpec.scala 358:9]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[IntervalSpec.scala 358:9]
    when _T_27 : @[IntervalSpec.scala 358:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:358 assert(enclosedViaRangeString === 5.I)\n") @[IntervalSpec.scala 358:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 358:9]
      skip @[IntervalSpec.scala 358:9]
    node _T_28 = bits(reset, 0, 0) @[IntervalSpec.scala 360:7]
    node _T_29 = eq(_T_28, UInt<1>("h00")) @[IntervalSpec.scala 360:7]
    when _T_29 : @[IntervalSpec.scala 360:7]
      stop(clock, UInt<1>(1), 0) @[IntervalSpec.scala 360:7]
      skip @[IntervalSpec.scala 360:7]
    
