;chisel3.BuildInfo$@527a8665
circuit ShiftsTester : 
  module ShiftsTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg cntVal : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    wire done : UInt<1>
    done <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node wrap_wrap = eq(cntVal, UInt<2>("h03")) @[Counter.scala 72:24]
      node _wrap_value_T = add(cntVal, UInt<1>("h01")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      cntVal <= _wrap_value_T_1 @[Counter.scala 76:15]
      done <= wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    node _srs_T = add(cntVal, UInt<5>("h017")) @[Reg.scala 77:35]
    node _srs_T_1 = tail(_srs_T, 1) @[Reg.scala 77:35]
    reg srs_0 : UInt<5>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      srs_0 <= _srs_T_1 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg srs_1 : UInt<5>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      srs_1 <= srs_0 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg srs_2 : UInt<5>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      srs_2 <= srs_1 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg srs_3 : UInt<5>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      srs_3 <= srs_2 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg REG : UInt<1>, clock @[Reg.scala 78:15]
    REG <= done @[Reg.scala 78:15]
    when REG : @[Reg.scala 78:23]
      node _T = eq(srs_0, UInt<5>("h01a")) @[Reg.scala 80:19]
      node _T_1 = bits(reset, 0, 0) @[Reg.scala 80:13]
      node _T_2 = or(_T, _T_1) @[Reg.scala 80:13]
      node _T_3 = eq(_T_2, UInt<1>("h00")) @[Reg.scala 80:13]
      when _T_3 : @[Reg.scala 80:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Reg.scala:80 assert(data === (23 + n - 1 - index).U)\n") @[Reg.scala 80:13]
        stop(clock, UInt<1>(1), 1) @[Reg.scala 80:13]
        skip @[Reg.scala 80:13]
      node _T_4 = eq(srs_1, UInt<5>("h019")) @[Reg.scala 80:19]
      node _T_5 = bits(reset, 0, 0) @[Reg.scala 80:13]
      node _T_6 = or(_T_4, _T_5) @[Reg.scala 80:13]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[Reg.scala 80:13]
      when _T_7 : @[Reg.scala 80:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Reg.scala:80 assert(data === (23 + n - 1 - index).U)\n") @[Reg.scala 80:13]
        stop(clock, UInt<1>(1), 1) @[Reg.scala 80:13]
        skip @[Reg.scala 80:13]
      node _T_8 = eq(srs_2, UInt<5>("h018")) @[Reg.scala 80:19]
      node _T_9 = bits(reset, 0, 0) @[Reg.scala 80:13]
      node _T_10 = or(_T_8, _T_9) @[Reg.scala 80:13]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[Reg.scala 80:13]
      when _T_11 : @[Reg.scala 80:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Reg.scala:80 assert(data === (23 + n - 1 - index).U)\n") @[Reg.scala 80:13]
        stop(clock, UInt<1>(1), 1) @[Reg.scala 80:13]
        skip @[Reg.scala 80:13]
      node _T_12 = eq(srs_3, UInt<5>("h017")) @[Reg.scala 80:19]
      node _T_13 = bits(reset, 0, 0) @[Reg.scala 80:13]
      node _T_14 = or(_T_12, _T_13) @[Reg.scala 80:13]
      node _T_15 = eq(_T_14, UInt<1>("h00")) @[Reg.scala 80:13]
      when _T_15 : @[Reg.scala 80:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Reg.scala:80 assert(data === (23 + n - 1 - index).U)\n") @[Reg.scala 80:13]
        stop(clock, UInt<1>(1), 1) @[Reg.scala 80:13]
        skip @[Reg.scala 80:13]
      node _T_16 = bits(reset, 0, 0) @[Reg.scala 82:9]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[Reg.scala 82:9]
      when _T_17 : @[Reg.scala 82:9]
        stop(clock, UInt<1>(1), 0) @[Reg.scala 82:9]
        skip @[Reg.scala 82:9]
      skip @[Reg.scala 78:23]
    
