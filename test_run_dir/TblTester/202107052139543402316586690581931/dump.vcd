$version Generated by VerilatedVcd $end
$date Mon Jul  5 21:39:56 2021 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 : clock $end
  $var wire  1 ; reset $end
  $scope module TblTester $end
   $var wire  1 : clock $end
   $var wire  3 ' cnt [2:0] $end
   $var wire  1 : dut_clock $end
   $var wire  4 % dut_io_d [3:0] $end
   $var wire  4 & dut_io_o [3:0] $end
   $var wire  4 $ dut_io_ri [3:0] $end
   $var wire  4 # dut_io_wi [3:0] $end
   $var wire  1 ; reset $end
   $var wire  1 ( wrap_wrap $end
   $scope module dut $end
    $var wire  1 : clock $end
    $var wire  4 % io_d [3:0] $end
    $var wire  4 & io_o [3:0] $end
    $var wire  4 $ io_ri [3:0] $end
    $var wire  4 # io_wi [3:0] $end
    $var wire  4 ) m(0) [3:0] $end
    $var wire  4 * m(1) [3:0] $end
    $var wire  4 3 m(10) [3:0] $end
    $var wire  4 4 m(11) [3:0] $end
    $var wire  4 5 m(12) [3:0] $end
    $var wire  4 6 m(13) [3:0] $end
    $var wire  4 7 m(14) [3:0] $end
    $var wire  4 8 m(15) [3:0] $end
    $var wire  4 + m(2) [3:0] $end
    $var wire  4 , m(3) [3:0] $end
    $var wire  4 - m(4) [3:0] $end
    $var wire  4 . m(5) [3:0] $end
    $var wire  4 / m(6) [3:0] $end
    $var wire  4 0 m(7) [3:0] $end
    $var wire  4 1 m(8) [3:0] $end
    $var wire  4 2 m(9) [3:0] $end
    $var wire  4 # m_MPORT_addr [3:0] $end
    $var wire  4 % m_MPORT_data [3:0] $end
    $var wire  1 < m_MPORT_en $end
    $var wire  1 < m_MPORT_mask $end
    $var wire  4 $ m_io_o_MPORT_addr [3:0] $end
    $var wire  4 9 m_io_o_MPORT_data [3:0] $end
    $var wire  1 < m_io_o_MPORT_en $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0010 #
b0111 $
b0001 %
b0000 &
b000 '
0(
b0000 )
b0000 *
b0000 +
b0000 ,
b0000 -
b0000 .
b0000 /
b0000 0
b0000 1
b0000 2
b0000 3
b0000 4
b0000 5
b0000 6
b0000 7
b0000 8
b0000 9
0:
1;
1<
#1
b0001 +
1:
#2
#3
#4
#5
#6
0:
#7
#8
#9
#10
0;
#11
b1101 #
b0010 $
b1101 %
b0001 &
b001 '
b0001 9
1:
#12
#13
#14
#15
#16
0:
#17
#18
#19
#20
#21
b1000 #
b1101 $
b0001 %
b1101 &
b010 '
b1101 6
b1101 9
1:
#22
#23
#24
#25
#26
0:
#27
#28
#29
#30
#31
b0101 #
b1000 $
b1011 %
b0001 &
b011 '
b0001 1
b0001 9
1:
#32
#33
#34
#35
#36
0:
#37
#38
#39
#40
#41
b1100 #
b0101 $
b0111 %
b1011 &
b100 '
b1011 .
b1011 9
1:
#42
#43
#44
#45
#46
0:
#47
#48
#49
#50
#51
b1101 #
b1100 $
b1010 %
b0111 &
b101 '
b0111 5
b0111 9
1:
#52
#53
#54
#55
#56
0:
#57
#58
#59
#60
#61
b1011 #
b1101 $
b0000 %
b1010 &
b110 '
b1010 6
b1010 9
1:
#62
#63
#64
#65
#66
0:
#67
#68
#69
#70
#71
b0111 #
b1011 $
b1010 %
b0000 &
b111 '
1(
b0000 9
1:
#72
#73
#74
#75
#76
0:
#77
#78
#79
#80
