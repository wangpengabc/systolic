;chisel3.BuildInfo$@527a8665
circuit MixedVecRegTester : 
  module MixedVecRegTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire valuesInit : {7 : UInt<4>, 6 : UInt<4>, 5 : UInt<4>, 4 : UInt<4>, 3 : UInt<4>, 2 : UInt<4>, 1 : UInt<4>, 0 : UInt<4>} @[MixedVec.scala 27:26]
    valuesInit.0 <= UInt<4>("h0d") @[MixedVec.scala 30:9]
    valuesInit.1 <= UInt<4>("h06") @[MixedVec.scala 30:9]
    valuesInit.2 <= UInt<4>("h04") @[MixedVec.scala 30:9]
    valuesInit.3 <= UInt<4>("h04") @[MixedVec.scala 30:9]
    valuesInit.4 <= UInt<4>("h0d") @[MixedVec.scala 30:9]
    valuesInit.5 <= UInt<4>("h00") @[MixedVec.scala 30:9]
    valuesInit.6 <= UInt<4>("h02") @[MixedVec.scala 30:9]
    valuesInit.7 <= UInt<4>("h03") @[MixedVec.scala 30:9]
    reg reg : {7 : UInt<4>, 6 : UInt<4>, 5 : UInt<4>, 4 : UInt<4>, 3 : UInt<4>, 2 : UInt<4>, 1 : UInt<4>, 0 : UInt<4>}, clock @[MixedVecSpec.scala 21:16]
    reg doneReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MixedVecSpec.scala 23:24]
    doneReg <= UInt<1>("h01") @[MixedVecSpec.scala 24:11]
    node _T = eq(doneReg, UInt<1>("h00")) @[MixedVecSpec.scala 26:8]
    when _T : @[MixedVecSpec.scala 26:18]
      reg.0 <= valuesInit.0 @[MixedVec.scala 115:9]
      reg.1 <= valuesInit.1 @[MixedVec.scala 115:9]
      reg.2 <= valuesInit.2 @[MixedVec.scala 115:9]
      reg.3 <= valuesInit.3 @[MixedVec.scala 115:9]
      reg.4 <= valuesInit.4 @[MixedVec.scala 115:9]
      reg.5 <= valuesInit.5 @[MixedVec.scala 115:9]
      reg.6 <= valuesInit.6 @[MixedVec.scala 115:9]
      reg.7 <= valuesInit.7 @[MixedVec.scala 115:9]
      skip @[MixedVecSpec.scala 26:18]
    else : @[MixedVecSpec.scala 29:15]
      node _T_1 = eq(reg.0, UInt<4>("h0d")) @[MixedVecSpec.scala 32:16]
      node _T_2 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_3 = or(_T_1, _T_2) @[MixedVecSpec.scala 32:13]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_4 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_5 = eq(reg.1, UInt<3>("h06")) @[MixedVecSpec.scala 32:16]
      node _T_6 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_7 = or(_T_5, _T_6) @[MixedVecSpec.scala 32:13]
      node _T_8 = eq(_T_7, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_8 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_9 = eq(reg.2, UInt<3>("h04")) @[MixedVecSpec.scala 32:16]
      node _T_10 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_11 = or(_T_9, _T_10) @[MixedVecSpec.scala 32:13]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_12 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_13 = eq(reg.3, UInt<3>("h04")) @[MixedVecSpec.scala 32:16]
      node _T_14 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_15 = or(_T_13, _T_14) @[MixedVecSpec.scala 32:13]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_16 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_17 = eq(reg.4, UInt<4>("h0d")) @[MixedVecSpec.scala 32:16]
      node _T_18 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_19 = or(_T_17, _T_18) @[MixedVecSpec.scala 32:13]
      node _T_20 = eq(_T_19, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_20 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_21 = eq(reg.5, UInt<1>("h00")) @[MixedVecSpec.scala 32:16]
      node _T_22 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_23 = or(_T_21, _T_22) @[MixedVecSpec.scala 32:13]
      node _T_24 = eq(_T_23, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_24 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_25 = eq(reg.6, UInt<2>("h02")) @[MixedVecSpec.scala 32:16]
      node _T_26 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_27 = or(_T_25, _T_26) @[MixedVecSpec.scala 32:13]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_28 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_29 = eq(reg.7, UInt<2>("h03")) @[MixedVecSpec.scala 32:16]
      node _T_30 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_31 = or(_T_29, _T_30) @[MixedVecSpec.scala 32:13]
      node _T_32 = eq(_T_31, UInt<1>("h00")) @[MixedVecSpec.scala 32:13]
      when _T_32 : @[MixedVecSpec.scala 32:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") @[MixedVecSpec.scala 32:13]
        stop(clock, UInt<1>(1), 1) @[MixedVecSpec.scala 32:13]
        skip @[MixedVecSpec.scala 32:13]
      node _T_33 = bits(reset, 0, 0) @[MixedVecSpec.scala 34:9]
      node _T_34 = eq(_T_33, UInt<1>("h00")) @[MixedVecSpec.scala 34:9]
      when _T_34 : @[MixedVecSpec.scala 34:9]
        stop(clock, UInt<1>(1), 0) @[MixedVecSpec.scala 34:9]
        skip @[MixedVecSpec.scala 34:9]
      skip @[MixedVecSpec.scala 29:15]
    
